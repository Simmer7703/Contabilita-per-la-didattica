// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Utenti
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sentInvites   Invite[]  @relation("InvitedBy")
  exercises     Exercise[]
}

enum Role {
  STUDENT
  TEACHER
}

// Inviti
model Invite {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  role      Role
  used      Boolean   @default(false)
  expires   DateTime
  createdAt DateTime  @default(now())
  createdBy String
  invitedBy User      @relation("InvitedBy", fields: [createdBy], references: [id])
}

// Piano dei conti
model Account {
  id            String    @id @default(cuid())
  code          String    @unique  
  name          String    
  type          AccountType
  parentId      String?   
  parent        Account?  @relation("SubAccounts", fields: [parentId], references: [id])
  subAccounts   Account[] @relation("SubAccounts")
  entries       Entry[]
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

// Registrazioni contabili
model Entry {
  id            String    @id @default(cuid())
  date          DateTime
  description   String
  amount        Decimal   @db.Decimal(10,2)
  type          EntryType
  accountId     String
  account       Account   @relation(fields: [accountId], references: [id])
  journalId     String
  journal       Journal   @relation(fields: [journalId], references: [id])
}

enum EntryType {
  DEBIT
  CREDIT
}

// Libro Giornale
model Journal {
  id            String    @id @default(cuid())
  date          DateTime
  description   String
  entries       Entry[]
  exerciseId    String
  exercise      Exercise  @relation(fields: [exerciseId], references: [id])
}

// Esercitazioni
model Exercise {
  id            String    @id @default(cuid())
  title         String
  description   String
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  journals      Journal[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}